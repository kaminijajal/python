1) Understanding how to create and access elements in a list.
-> Create a list 
    my_list = []
    numbers = [1, 2, 3, 4, 5]
    mixed = [10, "apple", 3.14, True]
    letters = list(("a", "b", "c"))
->Access element
    l = [1,2,3,4,5,6,7,8]
    print(l[4])
    print(l[-2])
    print(l[1:4])
    print(l[:2])
    print(l[2:])
    print(l[:])
-> Use [] to create or access elements.
-> Index starts at 0.
-> Negative indexes count from the end.
2) Indexing in lists (positive and negative indexing).
-> Positive
    Starts from 0 for the first element.
    Increases by 1 as you move forward.

    l = ["a","b","c","d","e","f","g","h","i"]
    print(l[0])
    print(l[4])
-> Nagative 
    Starts from -1 for the last element.
    Decreases by 1 as you move backward.

    print(l[-1])
    print(l[-4])
3)  Slicing a list: accessing a range of elements.
->In Python, list slicing lets you access a specific range of elements by specifying a start index, an end index, and optionally a step.
-> start → index where slicing begins (inclusive).
-> end → index where slicing stops (exclusive).
-> step → how many elements to skip each time (optional).
syntax
    list_name[start:end:step]
example
    number = [10,20,30,40,50,60,70,80,90,100,110]
    print(number[2:])
    print(number[:3])
    print(number[4:8])
    print(number[::2])
4) Common list operations: concatenation, repetition, membership
-> Concatenation (+)
    Combines two or more lists into a single list.
    Creates a new list without modifying the originals.
list1 = [1, 2, 3]
list2 = [4, 5]
result = list1 + list2
print(result)
->Repetition (*)
    Repeats the list elements multiple times.
    Useful for creating lists with repeated patterns.
list1 = ['A', 'B']
result = list1 * 3
print(result)
->Membership (in / not in)
    Checks if an element exists in a list.
    Returns True or False.
fruits = ['apple', 'banana', 'cherry']
print('banana' in fruits)      
print('orange' not in fruits)  
5) Understanding list methods like append(), insert(), remove(), pop().
f = ["Apple","Banana","Mango","Grapes]
->Append()
     Adds an element at the end of the list.
     syntax:- list.append(item)
     example:- f.append("Chikoo")
->Insert()
    Inserts an element at a specific index.
    syntax:- list.insert(index,item)
    examole:- f.insert(2,"Orange")
->Remove()
    Removes the first occurrence of a specified element.
    syntax:- list.remove(item)
    example:-  f.remove("Apple")
->Pop()
    Removes an element at a specific index (or the last element if no index is given) and returns it.
    syntax:- list.pop([index])
    example:- f.pop(3)           
6) Iterating over a list using loops.
->  fruits = ["apple", "banana", "cherry"]
->  
    for fruit in fruits:
        print(fruit)
-> 
    for i in range(len(fruits)):
        print(f"Index {i}: {fruits[i]}")
->
    for index, fruit in enumerate(fruits):
        print(f"Index {index}: {fruit}")
->  
    i = 0
    while i < len(fruits):
        print(fruits[i])
        i += 1
7) Sorting and reversing a list using sort(), sorted(), and reverse().
->Sort()
    Sorts the list in place (changes the original list)
    Returns None
    Can sort in ascending or descending order
    Exmple:-  
            numbers = [5, 2, 9, 1, 7]
            numbers.sort() 
            print("Ascending:", numbers)
            numbers.sort(reverse=True)
            print("Descending:", numbers)
->Sorted()
    Creates and returns a new sorted list
    Original list remains unchanged
    Works on any iterable (lists, tuples, strings)
    Example:- 
            numbers = [5, 2, 9, 1, 7]
            asc = sorted(numbers)
            desc = sorted(numbers, reverse=True) 
            print("Original list:", numbers)
            print("Sorted ascending:", asc)
            print("Sorted descending:", desc)
->Reverse()
    Reverses the order of elements in place
    Does not sort; just flips the list
    Exmple:-
            numbers = [5, 2, 9, 1, 7]
            numbers.reverse()
            print("Reversed list:", numbers)
8) Basic list manipulations: addition, deletion, updating, and slicing
-> color = ["Red","Blue,"White","Purple","Black"]

print.append("Pink")
print.insert(3,"Orange")
print.remove("Blue")
del color[0]
print.pop()
print.pop(5)
color[3] = "Green"
print(color[:3])
print(color[3:])
print(color[3:5])
print(color[::2])

9) Introduction to tuples, immutability.
-> In Python, a tuple is an ordered collection of elements, similar to a list, but immutable (unchangeable).
-> Ordered → elements have a fixed position.
-> Immutable → once created, you cannot change, add, or remove elements.
-> Can store different data types.
-> Can contain duplicate values.

    tuple1 = (1, 2, 3,4,5,6,7,8,9)
    tuple2 = ("apple", "banana", "cherry")
    tuple3 = (1, "hello", 3.5, True)
    empty_tuple = ()

    print(t[0]) 
    print(t[-1]) 
    print(t[1:3]) 

10) Basic operations with tuples: concatenation, repetition, 
-> 
    tuple1 = (1, 2, 3)
    tuple2 = (4, 5, 6)

# 1. Concatenation
    tuple_concat = tuple1 + tuple2
    print("Concatenation:", tuple_concat) 

# 2. Repetition
    tuple_repeat = tuple1 * 2
    print("Repetition:", tuple_repeat) 

# 3. Membership
    print( 2 in tuple1)    
    print( 10 not in tuple1) 

11) Slicing a tuple to access ranges of elements.
-> start → index where the slice begins (inclusive).
-> end → index where the slice stops (exclusive).
-> step → how many elements to skip (optional, default is 1)
    t = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    print(t[2:])
    print(t[:4])
    print(t[3:10])
    print(t[::3])
    print(t[-5:-2])

12) Introduction to dictionaries: key-value pairs.
-> In Python, a dictionary is a built-in data type used to store data in the form of key–value pairs.
-> Keys are unique identifiers.
-> Values are the data associated with those keys.
-> Dictionaries are unordered , mutable, and allow fast lookups by key.
-> Keys must be immutable types (e.g., strings, numbers, tuples).
-> Values can be any data type.
    dict = {
        "name":"abc"
        "age": 20
        "email":"abc@gmail.com
        "city":"xyz"
    }

13) Accessing, adding, updating, and deleting dictionary elements
->  dict = {1:"php",2:"Python",3:"java",4:"node",5:"Rect"}
    print(dict)
    print(dict[3])
    print(dict.get(3))

    dict[6] = "Ds"
    dict[3] = "abc"
    del dict[6]
14) Dictionary methods like keys(), values(), and items().
-> dict = {1:"php",2:"Python",3:"java",4:"node",5:"Rect"}
    print(dict.keys())
    print(dict.values())
    print(dict.items())
15) Iterating over a dictionary using loops.
-> dict = {1:"php",2:"Python",3:"java",4:"node",5:"Rect"}

    for i in dict:
        print(i)

    for i in dict.keys():
        print(i)

    for i in dict.values():
        print(i)

    for i,j in dict.items():
        print(i)
        print(j)
16) Merging two lists into a dictionary using loops or zip()
17) Counting occurrences of characters in a string using dictionaries
->  s = "Hello Python"
    count = {}

    for i in s:
        if count.get(i) is None:
            count.update({i:1})
        else:
            k = count.get(i)
            k+=1
            count.update({i:k})
    print(count)
   
18) Defining functions in Python
-> In Python, functions are reusable blocks of code that perform a specific task. They help 
    make your code more organized, modular, and easier to maintain.

    def function_name(parameters):
    
    # Code to execute
    return value
-> def – Keyword to define a function.
   function_name – The name you give to your function.
   parameters – Values you pass into the function.
   return – Sends a value back to the caller.
->  def greet():
        print("Hello, welcome to Python!")
    greet()
-> function with parameters
    def greet_user(name):
        print(f"Hello, {name}!")
    greet_user("Kamini")
-> function with return value
    def add(a, b):
        return a + b

    result = add(5, 3)
    print("Sum:", result)
-> function with defalut parameter
    def greet(name="Guest"):
        print(f"Hello, {name}!")
    greet()          
    greet("Kamini")   
19) Different types of functions: with/without parameters, with/without return values
-> without parameter without returnvalue
    def greet():
        print("Hello! Welcome to Python.")
    greet()
-> with parameter without return value
    def greet_user(name):
        print(f"Hello, {name}!")
    greet_user("Kamini")
-> with parameter with return value
    def add_numbers(a, b):
        return a + b
    result = add_numbers(5, 3)  
    print("Sum:", result)
-> without parameter with return value
    def get_pi():
        return 3.1415   
    pi_value = get_pi()
    print("Value of PI:", pi_value)
20) Anonymous functions (lambda functions).
-> Anonymous functions in Python, also called lambda 
   functions, are small, nameless functions defined using the lambda keyword.
-> lambda → keyword to define an anonymous function.
-> arguments → parameters (can be zero or more).
-> expression → a single expression whose result is returned automatically.
-> syntax: lambda arguments: expression
->  z = lambda x,y : x-y
    print(z(20,10))
-> using map()
    l = [2,4,6]
    w = [1,3,5]
    r = map(lambda a,b : 2*(a+b),l,w)
    print(list(r))
-> using filter()
    n = [1, 2, 3, 4, 5]
    evens = list(filter(lambda x: x % 2 == 0, n))
    print(evens)  
21) Introduction to Python modules and importing modules
-> A module in Python is just a file that contains Python code (functions, variables, or classes).
-> It helps organize code and makes it reusable.
-> Example: A file named math.py is a module.
-> type of modules
    Built-in modules → Already provided by Python.
    Example: math, random, os.

    User-defined modules → Created by the programmer.
    Example: A file mymodule.py with custom functions.
-> You can use modules by importing them into your program.
-> A module = Python file with reusable code.
-> Use import to bring functions/classes/variables from modules into your program.
22) Standard library modules: math, random
-> The Python Standard Library has many built-in modules. 
   Two of the commonly used ones are math and random
->The math module provides mathematical functions.
->You need to import it before using:
math module
    import math

    print(math.sqrt(25))       
    print(math.factorial(5))   
    print(math.pi)             
    print(math.pow(2, 3))      
    print(math.ceil(4.2))      
    print(math.floor(4.8))     

random module
-> The random module is used to generate random numbers.

    import random

    print(random.randint(1, 10))     
    print(random.random())           
    print(random.uniform(1, 5))      
    print(random.choice([10, 20, 30, 40]))
    print(random.shuffle([1, 2, 3, 4, 5]))  

-> math → for mathematical calculations
-> random → for random number generation / selections

23) Creating custom modules.
-> Python, a custom module is simply a .py file that contains Python code
    (functions, classes, or variables) that you can import and reuse in other programs.
-> Create custom module
    # mymodule.py
    def greet(name):
        return f"Hello, {name}!"

    def add(a, b):
        return a + b

    pi = 3.14159
-> use costom module in another file
    # main.py
    import mymodule   # importing the custom module

    print(mymodule.greet("Kamini"))
    print("Sum:", mymodule.add(10, 5))
    print("Value of pi:", mymodule.pi)
-> import spacific variables/functions
    from mymodule import greet, pi

    print(greet("User"))
    print("Pi is", pi)
-> rename function or module while import file 
    import mymodule as mm

    print(mm.add(3, 4))   # using alias


